<!-- vim: set ft=markdown : -->

# Selected exercise answers:

## Lab 1:

### Exercise 8:

1. `console.c` exports `cputchar`, which `printf` uses to actually print
   characters to the console.

2. This code handles scrolling the display. If the cursor's position is past
   the size of the display, it copies each row of the buffer into the preceding
   row, blanks out the last row on the screen, and moves the cursor position back
   one row (hopefully somewhere on the last row of the display, if the rest of
   the code is correct).

3. Ok:
  1. `fmt` points to the format string. `ap` points to the value `0x1`.
  2. Elided

4. The output is `He11o World`.  First, the character `'H'` is printed.  Then
   the first argument `57616` is printed as a hex literal, `e110`.  Next the
   characters `' '`, `'W'`, and `'o'` are printed.  Now, the trick: vcprintf
   will interpret the next value in the `va_list` as a string.  The next value
   is pointer to the word `0x00646c72`.  Since the platform is little-endian,
   reading this byte-by-byte by advancing a pointer -- as strings are read --
   will proceed from the rightmost byte to leftmost.  Namely, it will read and
   print the characters `0x72`, `0x6c`, `0x64`, and terminating at the null
   char `0x00` which is the leftmost byte of the word.

   On a big-endian platform, the word stored in `i` would be read left to
   right, so the value would need to be `0x726c6400` to see the same behavior.
   The immediate `57616` value would not need to be changed, since unlike the
   string-printing code operating on the `i` value, the `printnum` function
   never operates directly on the individual bytes of its `num` argument.

5. It will likely print the `int` value at some arbitrary memory address,
   depending on the behavior of `va_arg` when there are no more arguments in
   the `va_list` (which is undefined).

6. Presumably, `va_arg` in this hypothetical would pop off variadic arguments
   from last-to-first instead of in declaration order. So either the interface
   would change such that arguments referenced in the format string should be
   passed in reverse order, or it would need to somehow reverse the `va_list`
   after creating it.

### Exercise 9:

The kernel sets the stack pointer in `entry.S`, just before jumping into
`i386_init`.  The stack is located at `0xf0110000` and the kernel reserves
eight pages or 32 kilobytes.  The stack pointer is initialized to the "top" end
of the reserved area (the stack grows below it).

### Exercise 10:

Each recursive call of `test_backtrace` pushes 4 32-bit words on the stack.  First
the argument to `test_backtrace` is pushed.  Then the `call` instruction pushes
the address of the next execution.  The prologue of `test_backtrace` then pushes
`%ebp`, the caller's base pointer, and pushes `%ebx` to save its value to the stack
(since the function body will clobber its value).

### Exercise 11 (notes):

We could detect how many arguments are passed to the function by examining the
function's stab.  This might be problemtaic with variadic functions though.

```diff
diff --git a/kern/monitor.c b/kern/monitor.c
index ccc10ef..fde787f 100644
--- a/kern/monitor.c
+++ b/kern/monitor.c
@@ -66,12 +66,18 @@ mon_backtrace(int argc, char **argv, struct Trapframe *tf)
 		uint32_t *args = &ebp[2];
 		int i = 0;

-		cprintf("  ebp %08x  eip %08x  args %08x %08x %08x %08x %08x\n",
-				ebp, eip,
-				args[0], args[1], args[2], args[3], args[4]);
-
 		struct Eipdebuginfo info;
 		debuginfo_eip(eip, &info);
+
+		cprintf("  ebp %08x  eip %08x", ebp, eip);
+
+		if (info.eip_fn_narg > 0)
+			cprintf("  args");
+
+		for (i = 0; i < info.eip_fn_narg; ++i)
+			cprintf(" %08x", args[i]);
+		cputchar('\n');
+
 		cprintf("         %s:%d: %.*s+%d\n",
 				info.eip_file, info.eip_line,
 				info.eip_fn_namelen, info.eip_fn_name,
```

## Lab 2:

### Question 1.

The type of `x` should be `uintptr_t`; since `value` is dereferenced it must
correspond to a virtual address.

### Question 2.

+--------+------------+-------------------------------------------------------------+
| Entry  | Base vaddr | Points to (logically)                                       |
+--------+------------+-------------------------------------------------------------+
|  1023  | 0xffc00000 | Page table for top 4MiB of physical memory                  |
|  ...   |     ..     |                                                             |
|   961  | 0xf0400000 | Page table for [4MiB, 8MiB)                                 |
|   960  | 0xf0000000 | Page table for [0MiB, 4MiB) of physical mem                 |
|   959  | 0xef800000 | Page table for kernel stack + guard page (unmapped)         |
|   958  | 0xef800000 | Not mapped                                                  |
|   957  | 0xef400000 | User virtual page table (read-only mapping of `kern_pgdir`) |
|   956  | 0xef000000 | Read-only user mapping of `pages` structure                 |
|  ...   |     ..     |                                                             |
|     0  | 0x00000000 | Not mapped                                                  |
+--------+------------+-------------------------------------------------------------+

### Question 3.

Pages mapped for the kernel's use can't be read or written by user
programs because the `PTE_U` flag is not set in their PTEs.
Specifically, kernel memory is protected by the x86 architecture's
"current privilege level" (CPL) mechanism.  When the CPL is 3, trying
to read memory through a PDE or PTE without `PTE_U` set triggers a
fault.  When the CPL is 0, it can freely access memory whether `PTE_U`
is set or not.  By running kernel instructions with CPL 0, and user
instructions with CPL 3, the kernel's memory can be protected from
reads by user programs.

A similar mechanism allows the kernel to protect pages from writes
issued by user programs, using the `PTE_W` flag.  When the CPL is 3,
trying to write memory through a PDE or PTE without `PTE_W` set
triggers a fault.

### Question 4

The operating system can support up to 256 MB of physical memory.  The
kernel maps virtual addresses `[KERNBASE, 2^32)` to physical addresses
`[0, 2^32 - KERNBASE)`, the intention being to map all of physical
memory with this mapping: `2^32 - KERNBASE` is precisely 256 MB.

### Question 5

The memory overhead of mapping 256 MB of physical memory is 768 KB.

Assuming 4KB pages, `npages` is 2^16 meaning the `pages` array
takes up 2^16 * 8 bytes = 512 KB of memory.

Mapping all pages of physical memory at `KERNBASE` requires 2^16 * 4
bytes = 256 KB of memory for page tables.

(The kernel page directory uses another page of memory, which we won't
count since that's fixed no matter how much physical memory is
available up to the 32-bit addressing limit).

### Question 6

Code starts executing at a "high" EIP at the `call i386_init`
instruction, which jumps to an address the linker placedabove
`KERNBASE`.  In `entrypgdir.c`, a static, basic page table
`entry_pgtable` is set up.  `entry_pgtable` maps entry 0 to physical
page 0, entry 1 to physical page 1, entry 2 to physical page 2, and so
on.  `entrypgdir.c` also configures the entry code's page directory,
`entry_pgdir`, with two entries: the first at offset 0 which points to
`entry_pgtable`, and the second at offset `KERNBASE >> 22` which also
points to `entry_pgtable`.  Just before the jump to `i386_init`,
`entry_pgdir` is loaded into the `cr3` register and paging is enabled.

The effect of this page directory/table setup is that the linear
addresses `[0, 4MB)` and `[KERNBASE, KERNBASE+4MB)` are *both* mapped
to the first page of physical memory.  This allows the instructions in
`entry.S` just before the `relocated label`, which were loaded by the
boot loader into the first page of physical memory, to run without a
hitch after enabling paging, before jumping above `KERNBASE`.
